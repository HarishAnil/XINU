/*  main.c  - main */

#include <xinu.h>
void rndm(int abc){


	kprintf("called\n");
	char *vptr, *vptr1, *vptr0;
	vptr0 = (int*)vmalloc(4096);
	kprintf("Vptr0 : %d\n",(uint32)vptr0);

	vptr0[0] = 1;
	vptr0[1] = 2;
//	vptr[10000] = 5;

	kprintf("Vptr[0] : %d\n",vptr0[0]);
	kprintf("Vptr[1] : %d\n",vptr0[1]);

	vptr = vmalloc(3072);
	kprintf("Vptr : %X\n",(uint32)vptr);
	vptr[0] = 1;
	vptr[1] = 2;
//	vptr[10000] = 5;

	kprintf("Vptr[0] : %d\n",vptr[0]);
	kprintf("Vptr[1] : %d\n",vptr[1]);

	vptr = vmalloc(8192);
	kprintf("Vptr : %X\n",(uint32)vptr);
	vptr[0] = 1;
	vptr[0x1000] = 2;
	vptr[0x2000] = 2;
//	vptr[10000] = 5;

	kprintf("Vptr[0] : %d\n",vptr[0]);
	kprintf("Vptr[1] : %d\n",vptr[1]);

	vptr = vmalloc(4096);
	kprintf("Vptr : %X\n",(uint32)vptr);

	vptr1 = vmalloc(33*PAGE_SIZE);
	kprintf("Vptr : %X\n",(uint32)vptr1);

	uint32 addr=0;
	int i=0;
	vptr0[0] = 10;
	kprintf("Vptr0[%d] : %d\n",addr,vptr0[0]);
	for(i=0;i<33;i++){
		vptr1[addr] = 1;
		vptr1[addr] = 4;
		addr += 0x1000;
	}
	addr=0;
	for(i=0;i<33;i++){
		kprintf("Vptr1[%d] : %d\n",addr,vptr1[addr]);
		addr += 0x1000;
	}
//	vptr0[0] = 5;
	kprintf("Vptr0[0] : %d\n",vptr0[0]);

	kprintf("ABC : %d\n",abc);
	
}

process	main(void)
{

	/* Run the Xinu shell */

	kprintf("text start addr : %X\n", (uint32) &text);
	kprintf("text end addr : %X\n", (uint32) &etext);

	kprintf("data start addr : %X\n",(uint32)&data);
	kprintf("data end addr : %X\n", (uint32)&edata);

	kprintf("BSS start addr : %X\n", (uint32) &bss);
	kprintf("BSS end addr : %X\n", (uint32)&ebss);

	kprintf("prog end addr : %X\n", (uint32)&end);

	resume(create(swap_daemon, 8192,600, "swap daemon", 0));
	resume(vcreate(rndm, 8192,42, 100, "rndm", 1, 123));

	recvclr();
	resume(create(shell, 8192, 50, "shell", 1, CONSOLE));

	/* Wait for shell to exit and recreate it */

	while (TRUE) {
		receive();
		sleepms(200);
		kprintf("\n\nMain process recreating shell\n\n");
		resume(create(shell, 4096, 20, "shell", 1, CONSOLE));
	}
	return OK;
    
}
